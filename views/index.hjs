<!DOCTYPE html>
<html>
  <head>
    <title>DB Visual Music Player</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!-- Adding the new map code from Ammap -->
    <link rel="stylesheet" href="../ammap/ammap.css" type="text/css">  
    	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>      
        <script src="../ammap/ammap.js" type="text/javascript"></script>
        <!-- map file should be included after ammap.js -->
		<script src="../ammap/maps/js/worldLow.js" type="text/javascript"></script>    
        <script type="text/javascript">
                    
			// add all your code to this method, as this will ensure that page is loaded
			AmCharts.ready(function() {
			    // create AmMap object
			    var map = new AmCharts.AmMap();
			    // set path to images
			    map.pathToImages = "../ammap/images/";
			    
			    /* create data provider object
			     mapVar tells the map name of the variable of the map data. You have to
			     view source of the map file you included in order to find the name of the 
			     variable - it's the very first line after commented lines.
			     
			     getAreasFromMap indicates that amMap should read all the areas available
			     in the map data and treat them as they are included in your data provider.
			     in case you don't set it to true, all the areas except listed in data
			     provider will be treated as unlisted.
			    */
			    var dataProvider = {
			        mapVar: AmCharts.maps.worldLow,
			        getAreasFromMap:true                    
			    }; 
			    // pass data provider to the map object
			    map.dataProvider = dataProvider;
			
			    /* create areas settings
			     * autoZoom set to true means that the map will zoom-in when clicked on the area
			     * selectedColor indicates color of the clicked area.
			     */
			    map.areasSettings = {
			        autoZoom: true,
			        selectedColor: "#CC0000"
			    };
			
			    // let's say we want a small map to be displayed, so let's create and add it to the map
			    map.smallMap = new AmCharts.SmallMap();
			
			    // write the map to container div
			    map.write("mapdiv");               
			    
			});
            
        </script>
  </head>
  <body>
    <h1>DB Visual Music Player</h1>
	<div id="mapdiv" style="width: 100%; background-color:#EEEEEE; height: 500px;"></div>      
	<div style="display: none;">
    <form action='/' method='post' id='countrySubmit'>

	    <table>
	    <tr>
	    	<td>Country</td>
	    	<td> <input type="text" name="country" id="country" value="{{ country_name }}"></td>
	    </tr>
	    <tr>
	    	<td>From</td>
	    	<td><input type="text" name="fromYear" id="fromYear" value="{{ from_year }}"></td>
	    </tr>
	    <tr>
	    	<td>To</td>
	    	<td><input type="text" name="toYear" id="toYear" value="{{ to_year }}"></td>
	    </tr>
	    <tr>
	    	<td><input type="submit" value="Submit" id="submitButton"></td>
	   	</tr>
	    </table>
    </form>
    </div>

    <!--ADDING AJAX CALLS ON SUBMIT-->
    <!-- Overriding submit with ajax call-->
    <script type="text/javascript">
	    $(document).ready(function  () {

		 	$("#countrySubmit").submit(function  (e) {
		 		e.preventDefault();
		 		console.log();
		 		$.post("/",$(this).serialize(), function( data ) {
				  console.log(data);
				  checkSongExists(data);
				});
		 	})
		 });
    </script>


	<!-- Adding Slider for year-->
	<table>
		<tr>
			<td>From Year</td>
			<td><input type="range" min="1900" max="2015" value="{{ from_year }}" step="1" onchange="showValueFrom(this.value)" id="rangeFromYear" /></td>
			<td><span id="rangeFrom">{{ from_year }}</span></td>
		</tr>
		<tr>
			<td>To Year  </td>
			<td><input type="range" min="1900" max="2015" value="{{ to_year }}" step="1" onchange="showValueTo(this.value)" id="rangeToYear" /></td>
			<td><span id="rangeTo">{{ to_year }}</span></td>
		</tr>
	</table>

	</br>
	<div id='countrySelected'></div>
    <!--<div id='noCountries'>Number of songs from country from time period is {{ no_of_songs }}</div></br>-->
    

    <!--Inserting method to get country, change from Year and To Year values with year validation-->
    <script type="text/javascript">
    	//This function is called from ammap.js "clickMapObject" function
    	function getCountry(country){
    		document.getElementById('country').value = country;	
    		document.getElementById('countrySelected').innerHTML = country;
    		submitForm();
    	}
    	function showValueFrom(newValue){
    		if(newValue > document.getElementById("rangeToYear").value){
    			newValue = document.getElementById("rangeToYear").value;
    			document.getElementById("rangeFromYear").value = newValue;
    		}
			document.getElementById("rangeFrom").innerHTML=newValue;
			document.getElementById("fromYear").value = newValue;
			submitForm();
		}
		function showValueTo(newValue){
			if(newValue < document.getElementById("rangeFromYear").value){
    			newValue = document.getElementById("rangeFromYear").value;
    			document.getElementById("rangeToYear").value = newValue;
    		}
			document.getElementById("rangeTo").innerHTML=newValue;
			document.getElementById("toYear").value = newValue;
			submitForm();
		}
		//DOESN'T WORK IF COUNTRY NOT SELECTED
		//TODO - CHANGE QUERY TYPE DEPENDING ON SELECTION 
		function submitForm(){
			if(document.getElementById('country').value != "None"){
				//Not sure why direct submit is not working. Clicking submit is being overridden in ajax call above
				//document.getElementById("countrySubmit").submit();
				document.getElementById("submitButton").click();
			}
		}
		//checks if a valid songId is returned before displaying player block and playing it
		function checkSongExists(data){
			//strip double quotes from the string returned from server
			var videoId = data.replace(/"/g, '');

			if(videoId == "NoSongsReturned"){
			  	document.getElementById("nosong").style.display = 'block';
			  	document.getElementById("player").style.display = 'none';  	
			  	stopVideo();
			}
			else{
				document.getElementById("nosong").style.display = 'none';
			  	document.getElementById("player").style.display = 'block';
			  	playReceivedSong(videoId);	
			}
		}
	</script>

   <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <!--<div id="player" style="display : none;"></div>-->
    <div id="player" style="display : none;"></div>
    <div id="nosong" style="display : none;">No song from selected country for time period</div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady(youtube_link) {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: '{{ youtube_link }}',
          videoId: youtube_link,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          //setTimeout(stopVideo, 6000);
          done = true;
        }
        //SUBMIT Form again once playing completed to fetch new randomsup song
        if(event.data == YT.PlayerState.ENDED){
        	submitForm();
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
      //play song received by AJAX request
      function playReceivedSong(videoId){
		player.loadVideoById(videoId);
      }

    </script>
  </body>
</html>
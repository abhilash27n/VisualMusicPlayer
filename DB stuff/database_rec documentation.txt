1) Clear Artist duplicates

create table uniqueArtists as select distinct * from Artists;
truncate Artists;
insert into Artists select * from uniqueArtists;
drop uniqueArtists;

2) Indexes
Artists - artistId
Genres - songId
Songs - songCountry
GenresSong - songId
GenreRecommend - id, youtubeId

3) Recommendation creation

- Create encoded Genre table
create table GenreEncoded (GenreId int auto_increment primary key, GenreName varchar(50));
insert into GenreEncoded(GenreName) select distinct name from Genres order by name;

- Create Genres table with encoded values instead of the names for making recommendation easier
create table GenresSong as select g.level, ge.GenreId, g.songId from Genres g, GenreEncoded ge where g.name=ge.GenreName;

- Create table for Recommendation
create table GenreReco(youtubeID varchar(20) Primary key, genreIds varchar(200));

- Create procedure to populate recommendation table
	create_recommender_table
	get_encoded_genreIds

- Create new Reco table with auto increment primary key and GenreIds in sorted order(CREATE indexes for this table)
create table GenreRecommend as 
select (@rownum:=@rownum+1) as id, g.youtubeID, g.genreIds from GenreReco g, 
(Select @rownum:=0) as rownum order by g.genreIds;

- Use this new table and search for songs with +/- 2 primary key 
SELECT s.youtubeId as url, s.songName, s.songCountry, s.songLanguage, s.releaseDate from Songs s, (select ge.youtubeId from GenreRecommend ge,
	(select id-3 as low,id+3 as high from GenreRecommend where youtubeID = 'viExSCWJhRU') idsel
     where ge.id>idsel.low and ge.id<idsel.high and ge.youtubeId <> 'viExSCWJhRU') recSongs where s.youtubeId=recSongs.youtubeId;


- Creating Genre by Country stat table
create table GenreStats (songCountry varchar(50), genreName varchar(50), numSongs int) as
select S.songCountry, G.name, count(*) numSongs from 
Songs S, Genres G where 
S.youtubeId = G.songId and G.level = 1 
group by S.songCountry, G.name;

